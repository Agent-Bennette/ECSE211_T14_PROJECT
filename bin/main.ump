namespace ca.mcgill.ecse211.t14;

external Runnable{}

class Main{
  
  public static void main( String [] args ){
    //TODO: Starts the resources and passive threads before handing things off to the navigator
  }
  
  /**
	 * Sleeps the thread which calls it for the specified duration
	 * 
	 * @param duration length of sleep in milliseconds
	 */
	public static void sleepFor(long duration) {
		try {
			Thread.sleep(duration);
		} catch (InterruptedException e) {
			// Empty
		}
	}
}

class Resources{
  const double PI = 3.1415926535898;
  const double WHEEL_RADIUS = 2.15;
  const double BASE_WIDTH = 17.15;
  const int FORWARD_SPEED = 200;
  const int LOCAL_SPEED = 55;
  const int ACCELERATION = 1500;
  const double TILE_SIZE = 30.48;
  const int THRESHOLD_LIGHT = -30;
  const int MIN_DIST = 2;
  const int SAMPLE_ARRAY_SIZE = 18;
  const EV3LargeRegulatedMotor LEFT_MOTOR = new EV3LargeRegulatedMotor(MotorPort.D);
  const EV3LargeRegulatedMotor RIGHT_MOTOR = new EV3LargeRegulatedMotor(MotorPort.A);
  const SensorMode LEFT_LIGHT_SAMPLER = ( new EV3ColorSensor(SensorPort.S2) ).getRedMode();
  const SensorMode RIGHT_LIGHT_SAMPLER = ( new EV3ColorSensor(SensorPort.S1) ).getRedMode();
  const EV3ColorSensor FRONT_COLOUR_SENSOR = new EV3ColorSensor(SensorPort.S3);
  const EV3UltrasonicSensor ULTRASONIC_SENSOR = new EV3UltrasonicSensor(SensorPort.S4);
  const TextLCD LCD = LocalEV3.get().getTextLCD();
}



class Navigator{
  depend java.lang.Runnable;
  isA Runnable;
  enum MissionStatus { AwaitingMapParametres, LocalizingInitially, FindingAndCrossingBridge, LocatingVehicle, AttachingToVehicle, FindingAndCrossingBridgeAgain, NavigatingToFinalPosition };
  MissionStatus missionStatus;
  * -> 1 Map redMap;
  * -> 1 Map greenMap;
}

class Map{
  float startingArea_UR_x;
  float startingArea_UR_y;
  float startingArea_LL_x;
  float startingArea_LL_y;
  float bridgeArea_UR_x;
  float bridgeArea_UR_y;
  float bridgeArea_LL_x;
  float bridgeArea_LL_y;
  float searchArea_UR_x;
  float searchArea_UR_y;
  float searchArea_LL_x;
  float searchArea_LL_y;
}


class Odometer{
  depend java.lang.Runnable;
  isA Runnable;
  float x;
  float y;
  float direction;
}

class Localizer{
  public void initializePosition(){
    //TODO: Implement first localization algorithm
  }
  public void localizeToCross(float x, float y){
    //TODO: Implement the relocalization system used in Lab 5
  }
}



class ColourArbiter{
  public String identify(){
    //TODO: Identify what is currently in front of the light sensor. At the moment, we don't know how this is going to work;
    //so this is a placeholder.
  }
}

class UltrasonicWatcher{
  depend java.lang.Runnable;
  isA Runnable;
  public void setModeForwardStraight(){
    //TODO: Method which faces the ultrasonic sensor forward as it samples, as opposed to sweeping left and right.
  }
  public void setModeForwardSweeping(){
    //TODO: Method which osccilates the ultrasonic sensor left and right, as opposed to straight forward.
  }
  public double[] getData(){
    
  }
}

class LineWatcher{
  depend java.lang.Runnable;
  isA Runnable;
  public long foundLine(){
    //TODO: Implement a method which checks if the line watcher has found a line since it was last asked about lines.
    //If so, returns the time of when that line was detected in its long form; if not, returns -1. This opens up the
    //opportunity to calculate the robot's orientation based on how much sooner the left or right line sensor detected
    //the line before the other sensor did.
  }
}